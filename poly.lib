// vim:ft=faust
declare name        "PolyLib";
declare version     "0.1";
declare author      "Marc Joliet";
declare license     "MIT";
declare copyright   "(c)Marc Joliet 2013";

import("math.lib");

// return the "rest" of an expression (i.e., everything after the first element)
rest((ex,exx)) = exx;
rest(ex) = ex;

// Reverse the order of a beam (a set of buses); one version takes an N-bus, the
// other one takes an expression.
reverseN(N) = bus(N) <: par(i,N,selector(N-1-i,N));
reverse(P)  = par(i,N,take(N-i,P)) with {
    N = count(P);
};

// Multiplication of two polynomials, with orders M-1 and N-1, respectively; one
// version takes an N-bus, the other one takes an expression.
poly_multN(M,N) = A,B <: C with {
    MN = (M-1)+(N-1)+1;

    A = bus(M); B = bus(N);

    A1 = par(i,N-1,0),A,par(i,N-1,0);

    a(i) = A1:selector(i,N+N+M-2);
    b(i) = B:selector(i,N);
    C = par(i,MN,sum(j,N,a(j+i)*b(N-1-j)));
};

poly_mult(A,B) = C with {
    M = count(A);
    N = count(B);
    MN = (M-1)+(N-1)+1;

    A1 = par(i,N-1,0),A,par(i,N-1,0);

    a(i) = A1:selector(i,N+N+M-2);
    b(i) = take(i,B);
    C = par(i,MN,sum(j,N,a(j+i)*b(N-j)));
};

// Square of two polynomials.  This is a special case of poly_mult(N,M). One
// version takes an N-bus, the other one takes an expression.
polysqN(N) = bus(N) <: poly_multN(N,N);
polysq(A)  = poly_mult(A,A);
