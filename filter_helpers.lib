declare name        "Filter Helpers";
declare version     "0.1";
declare author      "Marc Joliet";
declare license     "MIT";
declare copyright   "(c)Marc Joliet 2013";

import("math.lib");

// generate a pair of double *c*omplementary filters
// see tf1s() in filter.lib
tf1sc(b1,b0,a0,w1) = lp, hp
with {
  c   = 1/tan((w1)*0.5/SR); // bilinear-transform scale-factor
  d   = a0 + c;
  b1d = (b0 - b1*c) / d;
  b0d = (b0 + b1*c) / d;
  a1d = (a0 - c) / d;
  lp = tf1(b0d,b1d,a1d);
  Q = gpq((b0d,b1d),(1.0,a1d),2);
  q(i) = Q:selector(i,2);
  hp = tf1(q(0),q(1),a1d);
};

// generate a pair of double *c*omplementary filters
// see tf2s() in filter.lib
tf2sc(b2,b1,b0,a1,a0,w1) = lp, hp
with {
  c   = 1/tan(w1*0.5/SR); // bilinear-transform scale-factor
  csq = c*c;
  d   = a0 + a1 * c + csq;
  b0d = (b0 + b1 * c + b2 * csq)/d;
  b1d = 2 * (b0 - b2 * csq)/d;
  b2d = (b0 - b1 * c + b2 * csq)/d;
  a1d = 2 * (a0 - csq)/d;
  a2d = (a0 - a1*c + csq)/d;
  lp = tf2(b0d,b1d,b2d,a1d,a2d);
  Q = gpq((b0d,b1d,b2d),(1.0,a1d,a2d),3);
  q(i) = Q:selector(i,3);
  hp = tf2(q(0),q(1),q(2),a1d,a2d);
};

// digitize the analog coefficients of a second order section
// see tf2s() in filter.lib
tf2s_coeffs(b2,b1,b0,a1,a0,w1) = coeffs with {
    c   = 1/tan(w1*0.5/SR); // bilinear-transform scale-factor
    csq = c*c;
    d   = a0 + a1 * c + csq;
    b0d = (b0 + b1 * c + b2 * csq)/d;
    b1d = 2 * (b0 - b2 * csq)/d;
    b2d = (b0 - b1 * c + b2 * csq)/d;
    a1d = 2 * (a0 - csq)/d;
    a2d = (a0 - a1*c + csq)/d;

    coeffs = b0d,b1d,b2d,1.0,a1d,a2d;
};

// digitize the analog coefficients of a first order section
// see tf1s() in filter.lib
tf1s_coeffs(b1,b0,a0,w1) = coeffs with {
    c   = 1/tan((w1)*0.5/SR); // bilinear-transform scale-factor
    d   = a0 + c;
    b1d = (b0 - b1*c) / d;
    b0d = (b0 + b1*c) / d;
    a1d = (a0 - c) / d;

    coeffs = b0d,b1d,1.0,a1d;
};
