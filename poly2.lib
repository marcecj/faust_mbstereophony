import("math.lib");

select_modulo(0) = _;
select_modulo(i) = !;

bottom_kill(N)  = par(k,N,!);
top_kill(i,N,M)   = par(k,N*M-(i*M-i+1)-i,!);
middle_sum(i,N,M) = par(k, i*N-i+1, (select_modulo(k%(M-1)))):>_;
      // middle_sum(2,2,3) = par(k, 2*2-2+1, (select(k%(3-1)))) >:_;
      // middle_sum(2,2,3) = par(k,       3, (select(k%(2)))) >:_;
      // middle_sum(1,2,3) = par(k, 1*3-2+1, (select(k%(3-1)))) >:_;
      // middle_sum(1,2,3) = par(k,       2, (select(k%(2)))) >:_;

sum_coeffs(0,1,1) = +;
sum_coeffs(0,N,M) = _,par(i,N*M-1,!);
sum_coeffs(M,N,M) = par(i,N*M-1,!),_;
sum_coeffs(i,N,M)  = bottom_kill(i), (par(k,i*N-i+1,_) : middle_sum(i,N,M)), top_kill(i,N,M);
sum_coeffs2(i,N) = top_kill(i,N),  (par(k,i*N-i+1,_) : middle_sum(i,N)), bottom_kill(i);

reverse(N) = bus(N) <: par(i,N,selector(N-1-i,N));

// Done
polymult_facs(N,M) = bus(N+M) :
    par(i, N, (_<:bus(M))), bus(M) :
    interleave(M,N+1) :
    par(i, M, (bus(N), (_<:bus(N)))) :
    par(i, M, interleave(N,2)) :
    par(i,N*M,*);

polymult(1,M) = polymult_facs(1,M);
polymult(2,M) = polymult_facs(2) <:
        par(i,2,sum_coeffs(i,2)),
        sum_coeffs(2,2);
polymult(N,M) = polymult_facs(N) <:
        par(i,N,sum_coeffs(i,N)),
        par(i,N-2,sum_coeffs2(N-2-i,N)),
        sum_coeffs(N,N);
polymult(N,N) = polysq(N);
